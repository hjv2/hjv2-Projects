#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REST.DATA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="REST")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGateway(Gateway instance);
    partial void UpdateGateway(Gateway instance);
    partial void DeleteGateway(Gateway instance);
    partial void InsertPeriphericalDevice(PeriphericalDevice instance);
    partial void UpdatePeriphericalDevice(PeriphericalDevice instance);
    partial void DeletePeriphericalDevice(PeriphericalDevice instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::REST.Properties.Settings.Default.RESTConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Gateway> Gateways
		{
			get
			{
				return this.GetTable<Gateway>();
			}
		}
		
		public System.Data.Linq.Table<PeriphericalDevice> PeriphericalDevices
		{
			get
			{
				return this.GetTable<PeriphericalDevice>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gateway")]
	public partial class Gateway : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGateway;
		
		private string _uniqueSerialNum;
		
		private string _humanReadable;
		
		private string _IPv4;
		
		private EntitySet<PeriphericalDevice> _PeriphericalDevices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGatewayChanging(int value);
    partial void OnidGatewayChanged();
    partial void OnuniqueSerialNumChanging(string value);
    partial void OnuniqueSerialNumChanged();
    partial void OnhumanReadableChanging(string value);
    partial void OnhumanReadableChanged();
    partial void OnIPv4Changing(string value);
    partial void OnIPv4Changed();
    #endregion
		
		public Gateway()
		{
			this._PeriphericalDevices = new EntitySet<PeriphericalDevice>(new Action<PeriphericalDevice>(this.attach_PeriphericalDevices), new Action<PeriphericalDevice>(this.detach_PeriphericalDevices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGateway", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idGateway
		{
			get
			{
				return this._idGateway;
			}
			set
			{
				if ((this._idGateway != value))
				{
					this.OnidGatewayChanging(value);
					this.SendPropertyChanging();
					this._idGateway = value;
					this.SendPropertyChanged("idGateway");
					this.OnidGatewayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uniqueSerialNum", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string uniqueSerialNum
		{
			get
			{
				return this._uniqueSerialNum;
			}
			set
			{
				if ((this._uniqueSerialNum != value))
				{
					this.OnuniqueSerialNumChanging(value);
					this.SendPropertyChanging();
					this._uniqueSerialNum = value;
					this.SendPropertyChanged("uniqueSerialNum");
					this.OnuniqueSerialNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_humanReadable", DbType="NVarChar(MAX)")]
		public string humanReadable
		{
			get
			{
				return this._humanReadable;
			}
			set
			{
				if ((this._humanReadable != value))
				{
					this.OnhumanReadableChanging(value);
					this.SendPropertyChanging();
					this._humanReadable = value;
					this.SendPropertyChanged("humanReadable");
					this.OnhumanReadableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPv4", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IPv4
		{
			get
			{
				return this._IPv4;
			}
			set
			{
				if ((this._IPv4 != value))
				{
					this.OnIPv4Changing(value);
					this.SendPropertyChanging();
					this._IPv4 = value;
					this.SendPropertyChanged("IPv4");
					this.OnIPv4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gateway_PeriphericalDevice", Storage="_PeriphericalDevices", ThisKey="idGateway", OtherKey="idGateway")]
		public EntitySet<PeriphericalDevice> PeriphericalDevices
		{
			get
			{
				return this._PeriphericalDevices;
			}
			set
			{
				this._PeriphericalDevices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PeriphericalDevices(PeriphericalDevice entity)
		{
			this.SendPropertyChanging();
			entity.Gateway = this;
		}
		
		private void detach_PeriphericalDevices(PeriphericalDevice entity)
		{
			this.SendPropertyChanging();
			entity.Gateway = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PeriphericalDevice")]
	public partial class PeriphericalDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPD;
		
		private System.Nullable<int> _UID;
		
		private string _vendor;
		
		private System.Nullable<System.DateTime> _dateCreated;
		
		private System.Nullable<int> _idGateway;
		
		private System.Nullable<bool> _status;
		
		private EntityRef<Gateway> _Gateway;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPDChanging(int value);
    partial void OnidPDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnvendorChanging(string value);
    partial void OnvendorChanged();
    partial void OndateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OndateCreatedChanged();
    partial void OnidGatewayChanging(System.Nullable<int> value);
    partial void OnidGatewayChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    #endregion
		
		public PeriphericalDevice()
		{
			this._Gateway = default(EntityRef<Gateway>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPD
		{
			get
			{
				return this._idPD;
			}
			set
			{
				if ((this._idPD != value))
				{
					this.OnidPDChanging(value);
					this.SendPropertyChanging();
					this._idPD = value;
					this.SendPropertyChanged("idPD");
					this.OnidPDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vendor", DbType="NVarChar(MAX)")]
		public string vendor
		{
			get
			{
				return this._vendor;
			}
			set
			{
				if ((this._vendor != value))
				{
					this.OnvendorChanging(value);
					this.SendPropertyChanging();
					this._vendor = value;
					this.SendPropertyChanged("vendor");
					this.OnvendorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGateway", DbType="Int")]
		public System.Nullable<int> idGateway
		{
			get
			{
				return this._idGateway;
			}
			set
			{
				if ((this._idGateway != value))
				{
					if (this._Gateway.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGatewayChanging(value);
					this.SendPropertyChanging();
					this._idGateway = value;
					this.SendPropertyChanged("idGateway");
					this.OnidGatewayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit")]
		public System.Nullable<bool> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gateway_PeriphericalDevice", Storage="_Gateway", ThisKey="idGateway", OtherKey="idGateway", IsForeignKey=true, DeleteRule="CASCADE")]
		public Gateway Gateway
		{
			get
			{
				return this._Gateway.Entity;
			}
			set
			{
				Gateway previousValue = this._Gateway.Entity;
				if (((previousValue != value) 
							|| (this._Gateway.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gateway.Entity = null;
						previousValue.PeriphericalDevices.Remove(this);
					}
					this._Gateway.Entity = value;
					if ((value != null))
					{
						value.PeriphericalDevices.Add(this);
						this._idGateway = value.idGateway;
					}
					else
					{
						this._idGateway = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gateway");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
